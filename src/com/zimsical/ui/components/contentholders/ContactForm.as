package com.zimsical.ui.components.contentholders{		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.FocusEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.net.URLLoader;	import flash.net.URLVariables;	import flash.net.URLRequest;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequestMethod;	import com.greensock.TweenLite;	import com.greensock.OverwriteManager;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.BlurFilterPlugin;		TweenPlugin.activate([BlurFilterPlugin]);		public class ContactForm extends Sprite	{		private var nameField:Sprite;		private var phoneField:Sprite;		private var emailField:Sprite;		private var messageField:Sprite;				private var nameTextField:TextField;		private var phoneTextField:TextField;		private var emailTextField:TextField;		private var messageTextField:TextField;		private var alertTextField:TextField;				public var nameText:String;		public var emailText:String;		public var phoneText:String;		public var messageText:String;		public var sendButtonText:String;		public var sendingText:String;		public var errorEmailText:String;		public var errorServerText:String;		public var confirmationText:String;		public var textColor:uint;		public var borderColor:uint;		public var backgroundColor:uint;		public var selectedBorderColor:uint;		public var selectedBackgroundColor:uint;		public var selectedBlurAmount:uint;		public var sendButtonTextColor:uint;		public var sendButtonTextRollOverColor:uint;		public var sendButtonColor:uint;		public var sendButtonRollOverColor:uint;		public var errorColor:uint;		public var confirmationColor:uint;		public var nameWidth:Number;		public var phoneWidth:Number;		public var emailWidth:Number;		public var messageWidth:Number;		public var messageHeight:Number;		public var verticalSpacing:Number;				public function ContactForm()		{			OverwriteManager.init();						addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);			nameText = "Your Name";			phoneText = "Your Phone";			emailText = "Your Email";			messageText = "Your Message";			sendButtonText = "SEND MESSAGE";			sendingText = "Sending ...";			errorEmailText = "Please enter a valid email address!";			errorServerText = "Server error. Please try again later.";			confirmationText = "Message sent. I'll contact you shortly!";			textColor = 0x10C0C;			borderColor = 0xCCCCCC;			backgroundColor = 0xF6F6F7;			selectedBorderColor = 0x999999;			selectedBackgroundColor = 0xCBCBCB;			selectedBlurAmount = 15;			sendButtonTextColor = 0xFFFFFF;			sendButtonTextRollOverColor = 0xFFFFFF;			sendButtonColor = 0xF920A2;			sendButtonRollOverColor = 0xF66CBF;			errorColor = 0xF920A2;			confirmationColor = 0xF920A2;						nameWidth = 570;			phoneWidth = 570			emailWidth = 570;			messageWidth = 570;			messageHeight = 130;			verticalSpacing = 10;		}				private function init():void		{			createContactForm();		}				private function setFieldNames():void		{			if (nameTextField.text == "") nameTextField.text = nameText;			if (phoneTextField.text == "") phoneTextField.text = phoneText;			if (emailTextField.text == "") emailTextField.text = emailText;			if (messageTextField.text == "") messageTextField.text = messageText;		}				private function validateEmail(e:String):Boolean		{			// Check length			if(e.length >= 7) {				// Check for an @ sign				if(e.indexOf("@") > 0) {					// Check for at least 2 characters following the @					if((e.indexOf("@") + 2) < e.lastIndexOf(".")) {						// Check for a domain name of at least 2 characters						if (e.lastIndexOf(".") < (e.length - 2)) {							// If all the above tests pass, the email address is in valid format							return true; 						}					}				}			}			return false;		}				private function validateForm():void		{			var cf:Object = this;			var n:String = cf.getChildAt(0).getChildAt(2).text;			var p:String = cf.getChildAt(1).getChildAt(2).text;			var e:String = cf.getChildAt(2).getChildAt(2).text;			var m:String = cf.getChildAt(3).getChildAt(2).text;						if(validateEmail(e))			{				var loader:URLLoader = new URLLoader();				var req: = new URLRequest("http://www.edwardhotchkiss.com/contactForm.php");				var variables:URLVariables = new URLVariables();				loader.dataFormat = URLLoaderDataFormat.VARIABLES;				req.method = URLRequestMethod.POST;				variables.senderName = n;				variables.senderPhone = p;				variables.senderEmail = e;				variables.senderMessage = m;				req.data = variables;				loader.load(req);				loader.addEventListener(Event.COMPLETE, onSendComplete);				alertTextField.text = sendingText;				TweenLite.to(alertTextField, 0.1, {tint:confirmationColor});								function onSendComplete(e:Event):void				{					loader.removeEventListener(Event.COMPLETE, onSendComplete);					if (e.target.data.returnValue == 1)					// Message sent					{						TweenLite.to(alertTextField, 0.1, {tint:confirmationColor});						alertTextField.text = confirmationText;						nameTextField.text = nameText;						phoneTextField.text = phoneText;						emailTextField.text = emailText;						messageTextField.text = messageText;						stage.focus = null;						TweenLite.to(nameField.getChildByName("br"), 0.5, {tint:null});						TweenLite.to(phoneField.getChildByName("br"), 0.5, {tint:null});						TweenLite.to(emailField.getChildByName("br"), 0.5, {tint:null});						TweenLite.to(messageField.getChildByName("br"), 0.5, {tint:null});						TweenLite.to(nameField.getChildByName("bg"), 0.5, {tint:null});						TweenLite.to(phoneField.getChildByName("bg"), 0.5, {tint:null});						TweenLite.to(emailField.getChildByName("bg"), 0.5, {tint:null});						TweenLite.to(messageField.getChildByName("bg"), 0.5, {tint:null});					}					else					// Server error					{						TweenLite.to(alertTextField, 0.1, {tint:errorColor});						alertTextField.text = errorServerText;					}				}			}			else			// Email is not valid			{				TweenLite.to(alertTextField, 0.1, {tint:errorColor});				alertTextField.text = errorEmailText;				stage.focus = emailTextField;			}		}				private function createContactForm():void		{			var h:int = 30;			var tf:TextFormat = new TextFormat();			tf.font = "DIN-Regular";			tf.size = 14;			tf.color = textColor;			//tf.leading = 3; 						nameField = new Sprite();			var nameBr:Sprite = new Sprite();			nameBr.graphics.beginFill(borderColor);			nameBr.graphics.drawRect(0, 0, nameWidth, h);			nameBr.graphics.endFill();			nameBr.name = "br";			var nameBg:Sprite = new Sprite();			nameBg.graphics.beginFill(backgroundColor);			nameBg.graphics.drawRect(1, 1, nameWidth - 2, h - 2);			nameBg.graphics.endFill();			nameBg.name = "bg";			nameTextField = new TextField();			nameTextField.name = "nameTextField";			nameTextField.type = TextFieldType.INPUT;			nameTextField.tabIndex = 1;			nameTextField.width = nameWidth - 7;			nameTextField.height = h;			nameTextField.x = 3;			nameTextField.y = 4;			nameTextField.defaultTextFormat = tf;			nameTextField.antiAliasType = AntiAliasType.ADVANCED;			nameTextField.embedFonts = true;			nameTextField.wordWrap = false;			nameTextField.multiline = false;			nameTextField.maxChars = 100;			nameTextField.text = nameText;			nameTextField.addEventListener(FocusEvent.FOCUS_IN, onFocus, false, 0, true);			nameField.addChild(nameBr);			nameField.addChild(nameBg);			nameField.addChild(nameTextField);						emailField = new Sprite();			var emailBr:Sprite = new Sprite();			emailBr.graphics.beginFill(borderColor);			emailBr.graphics.drawRect(0, 0, emailWidth, h);			emailBr.graphics.endFill();			emailBr.name = "br";			var emailBg:Sprite = new Sprite();			emailBg.graphics.beginFill(backgroundColor);			emailBg.graphics.drawRect(1, 1, emailWidth - 2, h - 2);			emailBg.graphics.endFill();			emailBg.name = "bg";			emailTextField = new TextField();			emailTextField.name = "emailTextField";			emailTextField.type = TextFieldType.INPUT;			emailTextField.tabIndex = 3;			emailTextField.width = emailWidth - 7;			emailTextField.height = h;			emailTextField.x = 3;			emailTextField.y = 4;			emailTextField.defaultTextFormat = tf;			emailTextField.antiAliasType = AntiAliasType.ADVANCED;			emailTextField.embedFonts = true;			emailTextField.wordWrap = false;			emailTextField.multiline = false;			emailTextField.maxChars = 100;			emailTextField.text = emailText;			emailTextField.addEventListener(FocusEvent.FOCUS_IN, onFocus, false, 0, true);			emailField.addChild(emailBr);			emailField.addChild(emailBg);			emailField.addChild(emailTextField);			phoneField = new Sprite();			var phoneBr:Sprite = new Sprite();			phoneBr.graphics.beginFill(borderColor);			phoneBr.graphics.drawRect(0, 0, phoneWidth, h);			phoneBr.graphics.endFill();			phoneBr.name = "br";			var phoneBg:Sprite = new Sprite();			phoneBg.graphics.beginFill(backgroundColor);			phoneBg.graphics.drawRect(1, 1, phoneWidth - 2, h - 2);			phoneBg.graphics.endFill();			phoneBg.name = "bg";			phoneTextField = new TextField();			phoneTextField.name = "phoneTextField";			phoneTextField.type = TextFieldType.INPUT;			phoneTextField.tabIndex = 2;			phoneTextField.width = nameWidth - 7;			phoneTextField.height = h;			phoneTextField.x = 3;			phoneTextField.y = 4;			phoneTextField.defaultTextFormat = tf;			phoneTextField.antiAliasType = AntiAliasType.ADVANCED;			phoneTextField.embedFonts = true;			phoneTextField.wordWrap = false;			phoneTextField.multiline = false;			phoneTextField.maxChars = 100;			phoneTextField.text = phoneText;			phoneTextField.addEventListener(FocusEvent.FOCUS_IN, onFocus, false, 0, true);			phoneField.addChild(phoneBr);			phoneField.addChild(phoneBg);			phoneField.addChild(phoneTextField);						messageField = new Sprite();			var messageBr:Sprite = new Sprite();			messageBr.graphics.beginFill(borderColor);			messageBr.graphics.drawRect(0, 0, messageWidth, messageHeight);			messageBr.graphics.endFill();			messageBr.name = "br";			var messageBg:Sprite = new Sprite();			messageBg.graphics.beginFill(backgroundColor);			messageBg.graphics.drawRect(1, 1, messageWidth - 2, messageHeight - 2);			messageBg.graphics.endFill();			messageBg.name = "bg";			messageTextField = new TextField();			messageTextField.name = "messageTextField";			messageTextField.type = TextFieldType.INPUT;			messageTextField.tabIndex = 4;			messageTextField.width = messageWidth - 7;			messageTextField.height = messageHeight;			messageTextField.x = 3;			messageTextField.y = 4;			messageTextField.defaultTextFormat = tf;			messageTextField.antiAliasType = AntiAliasType.ADVANCED;			messageTextField.embedFonts = true;			messageTextField.wordWrap = true;			messageTextField.multiline = true;			messageTextField.maxChars = 2500;			messageTextField.text = messageText;			messageTextField.addEventListener(FocusEvent.FOCUS_IN, onFocus, false, 0, true);			messageField.addChild(messageBr);			messageField.addChild(messageBg);			messageField.addChild(messageTextField);						alertTextField = new TextField();			alertTextField.name = "errorField_mc";			alertTextField.autoSize = TextFieldAutoSize.LEFT;			alertTextField.defaultTextFormat = tf;			alertTextField.antiAliasType = AntiAliasType.ADVANCED;			alertTextField.embedFonts = true;			alertTextField.wordWrap = false;			alertTextField.multiline = false;			alertTextField.text = "";						addChild(nameField);			addChild(phoneField);			phoneField.y = h + verticalSpacing;			addChild(emailField);			emailField.y = 2 * (h + verticalSpacing);			addChild(messageField);			messageField.y = (h + verticalSpacing) * 3;			addChild(alertTextField);			alertTextField.x = 3;			alertTextField.y = messageField.y + messageHeight + 8;			var sendButton:Sprite = createSendButton();			addChild(sendButton);			sendButton.x = messageWidth - sendButton.width;			sendButton.y = messageField.y + messageHeight + verticalSpacing;		}				private function createSendButton():Sprite		{			var s:Sprite = new Sprite();			var tf:TextFormat = new TextFormat();			tf.font = "DIN-Regular";			tf.size = 12;			tf.color = sendButtonTextColor;			var t:TextField = new TextField();			t.defaultTextFormat = tf;			t.selectable = false;			t.multiline = false;			t.embedFonts = true;			t.text = sendButtonText;			t.x = 12;			t.y = 2;			t.name = "txt";			t.antiAliasType = AntiAliasType.ADVANCED;			var bg:Sprite = new Sprite();			bg.graphics.beginFill(sendButtonColor);			bg.graphics.drawRect(0, 0, t.width + 16, 23);			bg.graphics.endFill();			bg.name = "bg";						s.buttonMode = true;			s.mouseChildren = false;			s.addEventListener(MouseEvent.CLICK, onSendButtonClick, false, 0, true);			s.addEventListener(MouseEvent.ROLL_OVER, onSendButtonRollOver, false, 0, true);			s.addEventListener(MouseEvent.ROLL_OUT, onSendButtonRollOut, false, 0, true);						s.addChild(bg);			s.addChild(t);			return s;		}				private function onAddedToStage(e:Event):void		{			init();			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}		private function onSendButtonClick(e:MouseEvent):void		{			validateForm();		}				private function onSendButtonRollOver(e:MouseEvent):void		{			TweenLite.to(e.target.getChildByName("bg"), 0.5, {tint:sendButtonRollOverColor});			TweenLite.to(e.target.getChildByName("txt"), 0.5, {tint:sendButtonTextRollOverColor});		}				private function onSendButtonRollOut(e:MouseEvent):void		{			TweenLite.to(e.target.getChildByName("bg"), 0.5, {tint:null});			TweenLite.to(e.target.getChildByName("txt"), 0.5, {tint:null});		}				private function onFocus(e:Event):void		{			setFieldNames();			var mc:Object;			var names:Array = [nameField, phoneField, emailField, messageField];						switch (e.target.name)			{				case "nameTextField":				mc = nameField;				if(e.target.text == nameText) e.target.text = "";								break;								case "phoneTextField":				mc = phoneField;				if(e.target.text == phoneText) e.target.text = "";				break;									case "emailTextField":				mc = emailField;				if(e.target.text == emailText) e.target.text = "";				break;								case "messageTextField":				mc = messageField;				if(e.target.text == messageText) e.target.text = "";				break;								default:				trace("Switch statement error");			}						TweenLite.from(mc.getChildByName("br"), 0.5, {blurFilter:{blurX:selectedBlurAmount, blurY:selectedBlurAmount}});						for(var i:uint = 0; i < 3; i++)			{				var t:Object = names[i];								if(t == mc)				{					TweenLite.to(t.getChildByName("br"), 0.5, {tint:selectedBorderColor});					TweenLite.to(t.getChildByName("bg"), 0.5, {tint:selectedBackgroundColor});				}				else				{					TweenLite.to(t.getChildByName("br"), 0.5, {tint:null});					TweenLite.to(t.getChildByName("bg"), 0.5, {tint:null});				}			}		}			}}