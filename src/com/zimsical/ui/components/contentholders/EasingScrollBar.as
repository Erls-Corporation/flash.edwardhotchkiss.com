package com.zimsical.ui.components.contentholders{	import flash.display.Stage;	import flash.display.Sprite;	import flash.display.DisplayObjectContainer;	import flash.display.Graphics;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import com.greensock.OverwriteManager;	import com.greensock.TweenLite;		public class EasingScrollBar extends Sprite	{		private var displayContentContainer:DisplayObjectContainer;		private var trackColor:uint;		private var grabberColor:uint;		private var grabberPressColor:uint;		private var trackThickness:int;		private var grabberThickness:int;		private var scrollEaseAmount:int;		private var hasShine:Boolean;				private var scrollTrack:Sprite;		private var scrollGrabber:Sprite;		private var _tH:Number;		private var _cH:Number;		private var _scrollValue:Number;		private var _defaultPosition:Number;		private var stageWidth:Number;		private var stageHeight:Number;		private var grabberPressed:Boolean = false;				public function EasingScrollBar(c:DisplayObjectContainer, tc:uint, gc:uint, gpc:uint, tt:int, gt:int, ea:int, hs:Boolean)		{			displayContentContainer = c;			trackColor = tc;			grabberColor = gc;			grabberPressColor = gpc;			trackThickness = tt;			grabberThickness = gt;			scrollEaseAmount = ea;			hasShine = hs;			init();			OverwriteManager.init();		}				private function init():void		{			createTrack();			createGrabber();			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage, false, 0, true);			_defaultPosition = Math.round(displayContentContainer.y);			scrollGrabber.y = 0;		}				public function kill():void		{			stage.removeEventListener(Event.RESIZE, onStageResize);		}				private function stopScroll(e:Event):void		{			onUpListener();		}				private function scrollContent(e:Event):void		{			var ty:Number;			var dist:Number;			var moveAmount:Number;						ty = -((_cH - _tH) * (scrollGrabber.y / _scrollValue));			dist = ty - displayContentContainer.y + _defaultPosition;			moveAmount = dist / scrollEaseAmount;			displayContentContainer.y += Math.round(moveAmount);						if (Math.abs(displayContentContainer.y - ty - _defaultPosition) < 1.5)			{				scrollGrabber.removeEventListener(Event.ENTER_FRAME, scrollContent);				displayContentContainer.y = Math.round(ty) + _defaultPosition;			}					}				public function adjustSize():void		{			this.x = stageWidth - trackThickness;			scrollTrack.height = stageHeight;			scrollTrack.y = 0;			_tH = scrollTrack.height;			_cH = displayContentContainer.height + _defaultPosition;			scrollGrabber.getChildByName("bg").height = Math.ceil((_tH / _cH) * _tH);			if (scrollGrabber.getChildByName("bg").height < 35) scrollGrabber.getChildByName("bg").height = 35;			if (hasShine) scrollGrabber.getChildByName("shine").height = scrollGrabber.getChildByName("bg").height;			if ((scrollGrabber.y + scrollGrabber.getChildByName("bg").height) > _tH) scrollGrabber.y = _tH - scrollGrabber.getChildByName("bg").height;			scrollGrabber.y = (_cH < _tH) ? 0 : scrollGrabber.y;			this.visible = (_cH + 8 > _tH);			_scrollValue = _tH - scrollGrabber.getChildByName("bg").height;			displayContentContainer.y = Math.round(-((_cH - _tH) * (scrollGrabber.y / _scrollValue)) + _defaultPosition);		}		private function createTrack():void		{			scrollTrack = new Sprite();			var t:Sprite = new Sprite();			t.graphics.beginFill(trackColor); 			t.graphics.drawRect(0, 0, trackThickness, trackThickness);			t.graphics.endFill();			scrollTrack.addChild(t);			addChild(scrollTrack);		}				private function createGrabber():void		{			scrollGrabber = new Sprite();			var t:Sprite = new Sprite();			t.graphics.beginFill(grabberColor); 			t.graphics.drawRect(0, 0, grabberThickness, grabberThickness);			t.graphics.endFill();			t.name = "bg";			scrollGrabber.addChild(t);						if (hasShine)			{				var shine:Sprite = new Sprite();				var sg:Graphics = shine.graphics;				sg.beginFill(0xFFFFFF, 0.15);				sg.drawRect(0, 0, Math.ceil(trackThickness/2), trackThickness);				sg.endFill();				shine.x = Math.floor(trackThickness/2);				shine.name = "shine";				scrollGrabber.addChild(shine);			}						addChild(scrollGrabber);		}				private function onDownListener(e:MouseEvent):void		{			grabberPressed = true;			scrollGrabber.startDrag(false, new Rectangle(0, 0, 0, stageHeight - scrollGrabber.getChildByName("bg").height));			stage.addEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveListener, false, 0, true);			TweenLite.to(scrollGrabber.getChildByName("bg"), 0.5, { tint:grabberPressColor } );		}				private function onUpListener(e:MouseEvent = null):void		{			if (grabberPressed)			{				grabberPressed = false;				scrollGrabber.stopDrag();				stage.removeEventListener(MouseEvent.MOUSE_MOVE, onMouseMoveListener);				TweenLite.to(scrollGrabber.getChildByName("bg"), 0.5, { tint:null } );			}		}				private function onMouseMoveListener(e:MouseEvent):void		{			e.updateAfterEvent();			if (!scrollGrabber.willTrigger(Event.ENTER_FRAME)) scrollGrabber.addEventListener(Event.ENTER_FRAME, scrollContent, false, 0, true);		}				private function onTrackClick(e:MouseEvent):void		{			var p:int;			var s:int = 150;			p = Math.ceil(e.stageY);			if (p < scrollGrabber.y)			{				if(scrollGrabber.y < scrollGrabber.height)				{					TweenLite.to(scrollGrabber, 0.5, {y:0, onComplete:reset, overwrite:1});				}				else				{					TweenLite.to(scrollGrabber, 0.5, {y:"-150", onComplete:reset});				}								if(scrollGrabber.y < 0) scrollGrabber.y = 0;			}			else			{				if((scrollGrabber.y + scrollGrabber.height) > (stageHeight - scrollGrabber.height))				{					TweenLite.to(scrollGrabber, 0.5, {y:stageHeight - scrollGrabber.height, onComplete:reset, overwrite:1});				}				else				{					TweenLite.to(scrollGrabber, 0.5, {y:"150", onComplete:reset});				}								if(scrollGrabber.y + scrollGrabber.getChildByName("bg").height > scrollTrack.height) scrollGrabber.y = stage.stageHeight - scrollGrabber.getChildByName("bg").height;			}						function reset():void			{				if (scrollGrabber.y < 0) scrollGrabber.y = 0;				if (scrollGrabber.y + scrollGrabber.getChildByName("bg").height > scrollTrack.height) scrollGrabber.y = stage.stageHeight - scrollGrabber.getChildByName("bg").height;			}						scrollGrabber.addEventListener(Event.ENTER_FRAME, scrollContent, false, 0, true);		}				private function onAddedToStage(e:Event):void		{			stage.addEventListener(Event.MOUSE_LEAVE, stopScroll);			stage.addEventListener(Event.RESIZE, onStageResize, false, 0, true);			stage.addEventListener(MouseEvent.MOUSE_UP, onUpListener, false, 0, true);			scrollGrabber.addEventListener(MouseEvent.MOUSE_DOWN, onDownListener, false, 0, true);			scrollGrabber.buttonMode = true;			scrollTrack.addEventListener(MouseEvent.CLICK, onTrackClick, false, 0, true);			removeEventListener(Event.ADDED_TO_STAGE, onAddedToStage);			stageWidth = stage.stageWidth;			stageHeight = stage.stageHeight;			adjustSize();		}				private function onStageResize(e:Event):void		{			stageWidth = stage.stageWidth;			stageHeight = stage.stageHeight;			adjustSize();		}			}}